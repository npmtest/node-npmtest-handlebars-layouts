{"/home/travis/build/npmtest/node-npmtest-handlebars-layouts/test.js":"/* istanbul instrument in package npmtest_handlebars_layouts */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-handlebars-layouts/lib.npmtest_handlebars_layouts.js":"/* istanbul instrument in package npmtest_handlebars_layouts */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_handlebars_layouts = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_handlebars_layouts = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-handlebars-layouts/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-handlebars-layouts && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_handlebars_layouts */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_handlebars_layouts\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_handlebars_layouts.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_handlebars_layouts.rollup.js'] =\n            local.assetsDict['/assets.npmtest_handlebars_layouts.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_handlebars_layouts.__dirname + '/lib.npmtest_handlebars_layouts.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-handlebars-layouts/node_modules/handlebars-layouts/index.js":"'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction noop() {\n\treturn '';\n}\n\nfunction getStack(context) {\n\treturn context.$$layoutStack || (\n\t\tcontext.$$layoutStack = []\n\t);\n}\n\nfunction applyStack(context) {\n\tvar stack = getStack(context);\n\n\twhile (stack.length) {\n\t\tstack.shift()(context);\n\t}\n}\n\nfunction getActions(context) {\n\treturn context.$$layoutActions || (\n\t\tcontext.$$layoutActions = {}\n\t);\n}\n\nfunction getActionsByName(context, name) {\n\tvar actions = getActions(context);\n\n\treturn actions[name] || (\n\t\tactions[name] = []\n\t);\n}\n\nfunction applyAction(val, action) {\n\tvar context = this;\n\n\tfunction fn() {\n\t\treturn action.fn(context, action.options);\n\t}\n\n\tswitch (action.mode) {\n\t\tcase 'append': {\n\t\t\treturn val + fn();\n\t\t}\n\n\t\tcase 'prepend': {\n\t\t\treturn fn() + val;\n\t\t}\n\n\t\tcase 'replace': {\n\t\t\treturn fn();\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn val;\n\t\t}\n\t}\n}\n\nfunction mixin(target) {\n\tvar arg, key,\n\t\tlen = arguments.length,\n\t\ti = 1;\n\n\tfor (; i < len; i++) {\n\t\targ = arguments[i];\n\n\t\tif (!arg) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (key in arg) {\n\t\t\t// istanbul ignore else\n\t\t\tif (hasOwn.call(arg, key)) {\n\t\t\t\ttarget[key] = arg[key];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn target;\n}\n\n/**\n * Generates an object of layout helpers.\n *\n * @type {Function}\n * @param {Object} handlebars Handlebars instance.\n * @return {Object} Object of helpers.\n */\nfunction layouts(handlebars) {\n\tvar helpers = {\n\t\t/**\n\t\t * @method extend\n\t\t * @param {String} name\n\t\t * @param {?Object} customContext\n\t\t * @param {Object} options\n\t\t * @param {Function(Object)} options.fn\n\t\t * @param {Object} options.hash\n\t\t * @return {String} Rendered partial.\n\t\t */\n\t\textend: function (name, customContext, options) {\n\t\t\t// Make `customContext` optional\n\t\t\tif (arguments.length < 3) {\n\t\t\t\toptions = customContext;\n\t\t\t\tcustomContext = null;\n\t\t\t}\n\n\t\t\toptions = options || {};\n\n\t\t\tvar fn = options.fn || noop,\n\t\t\t\tcontext = mixin({}, this, customContext, options.hash),\n\t\t\t\tdata = handlebars.createFrame(options.data),\n\t\t\t\ttemplate = handlebars.partials[name];\n\n\t\t\t// Partial template required\n\t\t\tif (template == null) {\n\t\t\t\tthrow new Error('Missing partial: \\'' + name + '\\'');\n\t\t\t}\n\n\t\t\t// Compile partial, if needed\n\t\t\tif (typeof template !== 'function') {\n\t\t\t\ttemplate = handlebars.compile(template);\n\t\t\t}\n\n\t\t\t// Add overrides to stack\n\t\t\tgetStack(context).push(fn);\n\n\t\t\t// Render partial\n\t\t\treturn template(context, { data: data });\n\t\t},\n\n\t\t/**\n\t\t * @method embed\n\t\t * @param {String} name\n\t\t * @param {?Object} customContext\n\t\t * @param {Object} options\n\t\t * @param {Function(Object)} options.fn\n\t\t * @param {Object} options.hash\n\t\t * @return {String} Rendered partial.\n\t\t */\n\t\tembed: function () {\n\t\t\tvar context = mixin({}, this || {});\n\n\t\t\t// Reset context\n\t\t\tcontext.$$layoutStack = null;\n\t\t\tcontext.$$layoutActions = null;\n\n\t\t\t// Extend\n\t\t\treturn helpers.extend.apply(context, arguments);\n\t\t},\n\n\t\t/**\n\t\t * @method block\n\t\t * @param {String} name\n\t\t * @param {Object} options\n\t\t * @param {Function(Object)} options.fn\n\t\t * @return {String} Modified block content.\n\t\t */\n\t\tblock: function (name, options) {\n\t\t\toptions = options || {};\n\n\t\t\tvar fn = options.fn || noop,\n\t\t\t\tdata = handlebars.createFrame(options.data),\n\t\t\t\tcontext = this || {};\n\n\t\t\tapplyStack(context);\n\n\t\t\treturn getActionsByName(context, name).reduce(\n\t\t\t\tapplyAction.bind(context),\n\t\t\t\tfn(context, { data: data })\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * @method content\n\t\t * @param {String} name\n\t\t * @param {Object} options\n\t\t * @param {Function(Object)} options.fn\n\t\t * @param {Object} options.hash\n\t\t * @param {String} options.hash.mode\n\t\t * @return {String} Always empty.\n\t\t */\n\t\tcontent: function (name, options) {\n\t\t\toptions = options || {};\n\n\t\t\tvar fn = options.fn,\n\t\t\t\tdata = handlebars.createFrame(options.data),\n\t\t\t\thash = options.hash || {},\n\t\t\t\tmode = hash.mode || 'replace',\n\t\t\t\tcontext = this || {};\n\n\t\t\tapplyStack(context);\n\n\t\t\t// Getter\n\t\t\tif (!fn) {\n\t\t\t\treturn name in getActions(context);\n\t\t\t}\n\n\t\t\t// Setter\n\t\t\tgetActionsByName(context, name).push({\n\t\t\t\toptions: { data: data },\n\t\t\t\tmode: mode.toLowerCase(),\n\t\t\t\tfn: fn\n\t\t\t});\n\t\t}\n\t};\n\n\treturn helpers;\n}\n\n/**\n * Registers layout helpers on a Handlebars instance.\n *\n * @method register\n * @param {Object} handlebars Handlebars instance.\n * @return {Object} Object of helpers.\n * @static\n */\nlayouts.register = function (handlebars) {\n\tvar helpers = layouts(handlebars);\n\n\thandlebars.registerHelper(helpers);\n\n\treturn helpers;\n};\n\nmodule.exports = layouts;\n","/home/travis/build/npmtest/node-npmtest-handlebars-layouts/node_modules/handlebars-layouts/gulpfile.js":"'use strict';\n\nvar gulp = require('gulp'),\n\tpkg = require('./package.json'),\n\tpaths = {\n\t\tdest: './dist',\n\t\tgulp: './gulpfile.js',\n\t\tsrc: './index.js',\n\t\ttest: './test/*.{e2e,spec}.js'\n\t};\n\ngulp.task('default', ['build']);\n\ngulp.task('lint', function () {\n\tvar eslint = require('gulp-eslint');\n\n\treturn gulp\n\t\t.src([paths.gulp, paths.src, paths.test])\n\t\t.pipe(eslint())\n\t\t.pipe(eslint.format());\n});\n\ngulp.task('cover', function () {\n\tvar istanbul = require('gulp-istanbul');\n\n\treturn gulp\n\t\t.src(paths.src)\n\t\t.pipe(istanbul())\n\t\t.pipe(istanbul.hookRequire());\n});\n\ngulp.task('test', ['lint', 'cover'], function () {\n\tvar istanbul = require('gulp-istanbul'),\n\t\tmocha = require('gulp-mocha');\n\n\treturn gulp\n\t\t.src(paths.test)\n\t\t.pipe(mocha({ reporter: 'spec' }))\n\t\t.pipe(istanbul.writeReports());\n});\n\ngulp.task('build', ['test'], function () {\n\tvar browserify = require('browserify'),\n\t\tsource = require('vinyl-source-stream'),\n\t\toptions = { standalone: 'handlebars-layouts' };\n\n\treturn browserify(paths.src, options)\n\t\t.bundle()\n\t\t.pipe(source(pkg.name + '.js'))\n\t\t.pipe(gulp.dest(paths.dest));\n});\n"}